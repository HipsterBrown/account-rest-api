FORMAT: 1A

# account-rest-api

A generic REST-API for all things user accounts and sesions.

Send your pull-requests to https://github.com/gr2m/account-rest-api

## Group User

## Session [/session]

The session resource allows users to sign in, sign out and to check their
current session status.

### Sign In [PUT]

+ Request (application/json)

        {
            "username": "john@example.com",
            "password": "secret"
        }

+ Response 201 (application/json)

        {
            "username": "john@example.com",
            "id": "abc4567",
            "bearerToken": "validtoken123"
        }

### Check session [GET]

+ Request

    + Headers

            Authorization: Bearer validtoken123

+ Response 200 (application/json)

        {
            "username": "john@example.com",
            "id": "abc4567"
        }


### Sign Out [DELETE]

+ Request

    + Headers

            Authorization: Bearer validtoken123

+ Response 200 (application/json)

        {
            "username": "john@example.com",
            "id": "abc4567"
        }


## Account [/session/account]

The User account resource allows users to sign up, get
or set account properties, get or set secured properties, or destroy their
accounts.

Returned properties are only the one with access set to `read`,
not the ones with `readSecure`. Some properties might have no read
access at all, they are write only (like `password`).

If changing `secureWrite` properties, the user's password must be passed
as an additional header.

### Sign Up [PUT]

+ Request (application/json)

        {
            "username": "john@example.com",
            "password": "secret",
            "properties": {
                "customProperty": "foobar"
            }
        }

+ Response 201 (application/json)

        {
            "username": "john@example.com",
            "id": "abc4567"
            "bearerToken": "validtoken123",
            "properties": {
                "customProperty": "foobar"
            }
        }

### Fetch [GET]

+ Request

    + Headers

            Authorization: Bearer validtoken123

+ Response 200 (application/json)

        {
            "username": "jane@example.com",
            "id": "def678"
            "properties": {
                "fullName": "Jane Doe"
            }
        }

### Change [PATCH]

+ Request (application/json)

    + Headers

            Authorization: Bearer validtoken123
            X-Password: secret

    + Body

            {
                "properties": {
                    "customProperty": "new foobar",
                    "funky": "fresh"
                }
            }

+ Response 200 (application/json)

        {
            "username": "john@example.com",
            "id": "abc4567"
            "bearerToken": "validtoken123",
            "properties": {
                "customProperty": "new foobar",
                "funky": "fresh"
            }
        }

### Close [DELETE]

+ Request

    + Headers

            Authorization: Bearer validtoken123

+ Response 200 (application/json)

        {
            "username": "john@example.com",
            "id": "abc4567"
            "bearerToken": "validtoken123",
            "properties": {
                "customProperty": "foobar"
            }
        }

## Account Property [/session/account/{property}]

When accessing a secured property, the current user's password must be passed

+ Parameters
    + property: customProperty (required, string) - name of custom user property


### Fetch user account property [GET]

+ Request

    + Headers

            Authorization: Bearer validtoken123
            X-Password: secret

+ Response 200 (application/json)

        "foobar"


### Change user account property [PUT]

+ Request (application/json)

    + Headers

            Authorization: Bearer validtoken123
            X-Password: secret

    + Body

            "newfoobar"

+ Response 201 (application/json)

        "newfoobar"


### remove user account property [DELETE]

+ Request

    + Headers

            Authorization: Bearer validtoken123
            X-Password: secret

+ Response 200 (application/json)

        "newfoobar"


## Group Admins

## Accounts [/accounts]

Admins can fetch and manage all user accounts and their properties
(including the ones set to `readSecure`)

### Create [POST]

+ Request (application/json)

        {
            "username": "jane@example.com",
            "password": "secret",
            "properties": {
                "fullName": "Jane Doe"
            }
        }

+ Response 201 (application/json)

        {
            "username": "john@example.com",
            "id": "abc4567"
            "bearerToken": "validtoken123",
            "properties": {
                "customProperty": "foobar"
            }
        }


### List all [GET]

+ Request

    + Headers

            Authorization: Bearer validtoken123

+ Response 200 (application/json)

        [
            {
                "username": "jane@example.com",
                "id": "def678"
                "properties": {
                    "fullName": "Jane Doe"
                }
            },
            {
                "username": "john@example.com",
                "id": "abc4567"
                "properties": {
                    "customProperty": "foobar"
                }
            }
        ]

## Account [/accounts/{username}]

+ Parameters
    + username: john@example.com (required, string) - uername of account

### Fetch [GET]

+ Request

    + Headers

            Authorization: Bearer validtoken123

+ Response 200 (application/json)

        {
            "username": "jane@example.com",
            "id": "def678"
            "properties": {
                "fullName": "Jane Doe"
            }
        }

### Change [PATCH]

+ Request (application/json)

    + Headers

            Authorization: Bearer validtoken123
            X-Password: secret

    + Body

            {
                "properties": {
                    "newProperty": "value",
                    "secureProperty": "wicked"
                }
            }

+ Response 200 (application/json)

            {
                "username": "john@example.com",
                "id": "def678"
                "properties": {
                    "customProperty": "foobar",
                    "newProperty": "value",
                    "secureProperty": "wicked"
                }
            }


### Delete [DELETE]

+ Request

    + Headers

            Authorization: Bearer validtoken123

+ Response 200 (application/json)

            {
                "username": "john@example.com",
                "id": "def678"
            }
